(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Bmob"] = factory();
	else
		root["Bmob"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const utils = __webpack_require__(4)

const Bmob = global.Bmob || {}

Bmob._config = utils.getConfig()
Bmob.initialize = (applicationId, applicationKey, masterKey) => {
  Bmob._config.applicationId = applicationId
  Bmob._config.applicationKey = applicationKey
}

module.exports = Bmob

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

const isObject = targe => Object.prototype.toString.call(targe) == "[object Object]" ? true : false
const isNumber = targe => Object.prototype.toString.call(targe) == "[object Number]" ? true : false
const isString = targe => Object.prototype.toString.call(targe) == "[object String]" ? true : false
const isUndefined = targe => Object.prototype.toString.call(targe) == "[object Undefined]" ? true : false
const isBoolean = targe => Object.prototype.toString.call(targe) == "[object Boolean]" ? true : false
const isArray = targe => Object.prototype.toString.call(targe) == "[object Array]" ? true : false
const isFunction = targe => Object.prototype.toString.call(targe) == "[object Function]" ? true : false

module.exports = {
  isObject,
  isNumber,
  isString,
  isUndefined,
  isBoolean,
  isArray,
  isFunction
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// const Bmob = require('./bmob')
const utils = __webpack_require__(4)

let request
// //获取当前应用类型
const type = utils.getAppType()
console.log('type',type)
// h5
if (type == 'h5') {
  // request = require('./axiosRequest')
  request = __webpack_require__(6)
} else if (type == 'wx') {
  // 小程序
  request = __webpack_require__(6)
} else if (type == 'hap') {
  //快应用功能
}

module.exports = request


/***/ }),
/* 3 */
/***/ (function(module, exports) {

class error {
  constructor(code, msg) {
    let error = new Error()

    error.code = code
    error.message = msg ? `Bmob.Error:{code:${code}, message:${msg}}` : `Bmob.Error:{code:${code}, message:${this.errorMsg(code)}}`

    return error
  }

  errorMsg(code) {
    switch (code) {
      case 415:
        // 参数类型不正确
        return 'incorrect parameter type.'
      case 416:
        // 参数为空
        return 'Parameter is null.'
      case 417:
        // 内容为空
        return 'There is no upload content.'
      case 418:
        // 内容为空
        return 'Log in failure.'
      default:
        return 'unknown error'
    }
  }
}

module.exports = error


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

let config
try {
  config = __webpack_require__(9)
} catch (e) {
  config = __webpack_require__(11)
}

/**
 * 获取 SDK 配置信息
 * @return {Object}
 */
const getConfig = () => {
  return config
}


// 获取SDK类型
const getAppType = () => {
  // Bmob._config = getConfig()
  let type;
  // h5
  if (typeof window != 'undefined') {
    type = 'h5'
  } else if (typeof wx != 'undefined') {
    // 小程序
    type = 'wx'
  } else if (Bmob._config.type == 3) {
    //快应用功能
    type = 'hap'
  } else {
    // 默认H5
    type = 'h5'
  }
  return type
}

module.exports = { getConfig, getAppType }


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

let Bmob = __webpack_require__(0)
const request = __webpack_require__(2)
const {isObject, isString, isNumber, isUndefined, isArray} = __webpack_require__(1)
const error = __webpack_require__(3)
const query = class query {
  
  constructor(parma) {
    this.tableName = `${Bmob._config.parameters.QUERY}/${parma}`
    this.init()
    this.addArray = {}
    this.setData = {}
  }
  init() {
    this.queryData = {}
    this.andData = {}
    this.orData = {}
    this.limitNum = 100
    this.skipNum = 0
    this.includes = ""
    this.orders = null
    this.keys = null
  }
  get(ObjectId) {
    if (!isString(ObjectId)) {
      throw new error(415)
    }

    let oneData = {}
    const incrementData = {}
    const unsetData = {}
    const addArray = {}

    const add = (key, val) => {
      if (!isString(key) || !isArray(val)) {
        throw new error(415)
      }
      addArray[key] = {
        "__op": "Add",
        "objects": val
      }
    }
    const addUnique = (key, val) => {
      if (!isString(key) || !isArray(val)) {
        throw new error(415)
      }
      addArray[key] = {
        "__op": "AddUnique",
        "objects": val
      }
    }
    const remove = (key, val) => {
      if (!isString(key) || !isArray(val)) {
        throw new error(415)
      }
      addArray[key] = {
        "__op": "Remove",
        "objects": val
      }
    }
    const increment = (key, val = 1) => {
      if (!isString(key) || !isNumber(val)) {
        throw new error(415)
      }
      incrementData[key] = {
        "__op": "Increment",
        "amount": val
      }
    }
    const unset = (key) => {
      if (!isString(ObjectId)) {
        throw new error(415)
      }
      unsetData[key] = {
        "__op": "Delete"
      }
    }
    const set = (key, val) => {
      if (!isString(key) || !isString(val)) {
        throw new error(415)
      }
      oneData[key] = val
    }
    const save = () => {
      const saveData = Object.assign(unsetData, oneData, incrementData, addArray)
      return request(`${this.tableName}/${ObjectId}`, 'put', saveData)
    }
    return new Promise((resolve, reject) => {
      request(`${this.tableName}/${ObjectId}`).then(results => {
        Object.defineProperty(results, "set", {value: set})
        Object.defineProperty(results, "unset", {value: unset})
        Object.defineProperty(results, "save", {value: save})
        Object.defineProperty(results, "increment", {value: increment})
        Object.defineProperty(results, "add", {value: add})
        Object.defineProperty(results, "remove", {value: remove})
        Object.defineProperty(results, "addUnique", {value: addUnique})
        Object.defineProperty(results, "destroy", {
          value: () => this.destroy(ObjectId)
        })
        resolve(results)
      }).catch(err => {
        reject(err)
      })
    })
  }
  destroy(ObjectId) {
    if (!isString(ObjectId)) {
      throw new error(415)
    }
    return request(`${this.tableName}/${ObjectId}`, 'delete')
  }
  set(key, val = "") {
    if (!isString(key) || !isString(val)) {
      throw new error(415)
    }
    this.setData[key] = val;
  }
  add(key, val) {
    if (!isString(key) || !isArray(val)) {
      throw new error(415)
    }
    this.addArray[key] = {
      "__op": "Add",
      "objects": val
    }
  }
  addUnique(key, val) {
    if (!isString(key) || !isArray(val)) {
      throw new error(415)
    }
    this.addArray[key] = {
      "__op": "AddUnique",
      "objects": val
    }
  }
  save(parma = {}) {
    if (!isObject(parma)) {
      throw new error(415)
    }
    const saveData = Object.assign(parma, this.setData, this.addArray)
    return new Promise((resolve, reject) => {
      request(`${this.tableName}`, 'post', saveData).then((results) => {
        this.addArray = {}
        this.setData = {}
        resolve(results)
      }).catch(err => {
        reject(err)
      })
    })
  }
  equalTo(key, operator, val) {
    if (!isString(key)) {
      throw new error(415)
    }
    const judge = (key, operator, val) => {
      let data = {},
        value = null
      if (key == "createdAt" || key == "updateAt") {
        value = {
          "__type": "Date",
          "iso": val
        }
      } else {
        value = val
      }
      switch (operator) {
        case '==':
          data[key] = value
          break;
        case '!=':
          data[key] = {
            "$ne": value
          }
          break;
        case '<':
          data[key] = {
            "$lt": value
          }
          break;
        case '<=':
          data[key] = {
            "$lte": value
          }
          break;
        case '>':
          data[key] = {
            "$gt": value
          }
        case '>=':
          data[key] = {
            "$gte": value
          }
          break;
        default:
          throw new error(415)
      }
      return data
    }
    const newData = judge(key, operator, val)
    if (Object.keys(this.queryData).length) {
      if (!isUndefined(this.queryData.$and)) {
        this.queryData.$and.push(newData)
      } else {
        this.queryData = {
          "$and": [this.queryData, newData]
        }
      }
    } else {
      this.queryData = newData
    }

    return newData
  }
  or(...querys) {
    querys.map((item, i) => {
      if (!isObject(item)) {
        throw new error(415)
      }
    })
    const queryData = this.queryData.$and
    if (!isUndefined(queryData)) {
      for (let i = 0; i < queryData.length; i++) {
        for (let k = 0; k < querys.length; k++) {
          if (JSON.stringify(queryData[i]) == JSON.stringify(querys[k])) {
            this.queryData.$and.splice(i, 1)
          }
        }
      }
    }
    this.orData = {
      "$or": querys
    }
  }
  and(...querys) {
    querys.map((item, i) => {
      if (!isObject(item)) {
        throw new error(415)
      }
    })
    this.andData = {
      "$and": querys
    }
  }
  limit(parma) {
    if (!isNumber(parma)) {
      throw new error(415)
    }
    if (parma > 1000) {
      parma = 1000
    }
    this.limitNum = parma
  }
  skip(parma) {
    if (!isNumber(parma)) {
      throw new error(415)
    }
    this.skipNum = parma
  }
  order(...key) {
    key.map(item => {
      if (!isString(item)) {
        throw new error(415)
      }
    })
    this.orders = key.join(',')
  }
  include(...key) {
    key.map(item => {
      if (!isString(item)) {
        throw new error(415)
      }
    })
    this.includes = key.join(',')
  }
  select(...key) {
    key.map(item => {
      if (!isString(item)) {
        throw new error(415)
      }
    })
    this.keys = key.join(',')
  }
  find() {
    let oneData = {};
    let parmas = {};
    let items = {};
    if (Object.keys(this.queryData).length) {
      parmas.where = this.queryData
    }
    if (Object.keys(this.andData).length) {
      parmas.where = Object.assign(this.andData, this.queryData)
    }
    if (Object.keys(this.orData).length) {
      parmas.where = Object.assign(this.orData, this.queryData)
    }
    parmas.limit = this.limitNum
    parmas.skip = this.skipNum
    parmas.include = this.includes
    parmas.order = this.orders
    parmas.keys = this.keys

    for (const key in parmas) {
      if (parmas.hasOwnProperty(key) && parmas[key] == null || parmas[key] == 0) {
        delete parmas[key]
      }
    }
    const set = (key, val) => {
      console.log(key, val)
      if (!key || !val) {
        throw new error(415)
      }
      oneData[key] = val
    }

    const batch = (method = 'updata') => {
      console.log(method)
      if (items.length < 1) {
        throw new error(416)
      }

      let id,
        k,
        v,
        p,
        m = 'put'
      let key = new Array()
      items.map(item => {

        id = `/${item.objectId}`
        if (id == '/undefined') {
          id = ''
          m = 'post'
        }

        p = {
          "method": m,
          "path": `${this.tableName}${id}`,
          "body": oneData
        };
        if (method == 'delete') {
          p = {
            "method": 'DELETE',
            "path": `${this.tableName}${id}`
          };
        }
        key.push(p)
        return item
      });

      let params = {
        "requests": key
      };
      // 批量操作
      const saveData = Object.assign(oneData)
      return request(`/1/batch`, 'POST', params)
    }
    const saveAll = () => {
      return batch()
    }

    const destroyAll = () => {
      return batch('delete')
    }
    return new Promise((resolve, reject) => {
      request(`${this.tableName}`, 'get', parmas).then(({results}) => {
        this.init()
        Object.defineProperty(results, "set", {value: set})
        Object.defineProperty(results, "saveAll", {value: saveAll})
        Object.defineProperty(results, "destroyAll", {value: destroyAll})
        items = results
        resolve(results)
      }).catch(err => {
        reject(err)
      })
    })

    const fetchAll = () => {
      // 批量获取
      const saveData = Object.assign(unsetData, oneData, incrementData, addArray)
      return request(`${this.tableName}/${ObjectId}`, 'put', saveData)
    }
  }
  count() {
    return new Promise((resolve, reject) => {
      request(`${this.tableName}`, 'get', {count: 1}).then(({count}) => {
        resolve(count)
      }).catch(err => {
        reject(err)
      })
    })
  }
}

module.exports = query


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

let Bmob = __webpack_require__(0)
const utils = __webpack_require__(4)

const setHeader = (config) => {
  let header = {
    'content-type': 'application/json',
    // 'X-Bmob-SDK-Type': 'hybrid',
    'X-Bmob-SDK-Type': 'wechatApp',
    'X-Bmob-Application-Id': config.applicationId,
    'X-Bmob-REST-API-Key': config.applicationKey
  }
  return header
}

const request = (route, method = "get", parma = {}) => {
  return new Promise((resolve, reject) => {
    const header = setHeader(Bmob._config)

    if (undefined == Bmob.User) {
      Bmob = __webpack_require__(0)
    }
    var current = Bmob.User.current()
    if (current) {
      header['X-Bmob-Session-Token'] = current.sessionToken
    }
    wx.request({
      url: Bmob._config.host + route, //仅为示例，并非真实的接口地址
      method: method,
      data: parma,
      header: header,
      success: res => {
        resolve(res.data);
      },
      fail: err => {
        console.log(err)
      }
    })
  })
}

module.exports = request

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {


const Bmob = __webpack_require__(0)

const query = __webpack_require__(5)
const user = __webpack_require__(12)
const file = __webpack_require__(16)
const pay = __webpack_require__(17)
const {
  generateCode,
  sendMessage,
  getAccessToken,
  sendWeAppMessage,
  refund,
  notifyMsg,
  functions,
  timestamp,
  requestPasswordReset,
  resetPasswordBySmsCode,
  updateUserPassword,
  push,
} = __webpack_require__(18)
const {requestSmsCode,verifySmsCode} = __webpack_require__(19)

// 生成二维码
Bmob.generateCode = generateCode
// 发送模板消息
Bmob.sendMessage = sendMessage
// 获取微信token
Bmob.getAccessToken = getAccessToken
// 小程序模版信息
Bmob.sendWeAppMessage = sendWeAppMessage
// 微信退款
Bmob.refund = refund
// 微信主人通知
Bmob.notifyMsg = notifyMsg
//请求短信验证码
Bmob.requestSmsCode = requestSmsCode
// 验证短信验证码
Bmob.verifySmsCode = verifySmsCode
// 云函数
Bmob.functions = functions
// 获取服务器时间
Bmob.timestamp = timestamp
// 密码重置(Email)
Bmob.requestPasswordReset = requestPasswordReset
// 密码重置(短信)
Bmob.resetPasswordBySmsCode = resetPasswordBySmsCode
// 密码重置(登录状态下更改密码)
Bmob.updateUserPassword = updateUserPassword
// APP推送
Bmob.push = push


Bmob.Pay = new pay()
Bmob.Query = parma => new query(parma)
Bmob.User =  new user()
Bmob.File = (name,object) => new file(name,object)
Bmob.request = __webpack_require__(2) 

try {
  window.Bmob = Bmob
}
catch(err) {
    wx.Bmob = Bmob
}

 module.exports = Bmob


/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

const ROOT = __webpack_require__(10)
const HOST = 'https://api.bmob.cn'
const APPLICATION_ID = ''
const APPLICATION_KEY = ''
// 这行在小程序引入app.js报错
const VERSION = `v${ROOT.version}`
// 1.h5 2.小程序 3.快应用
const TYPE = 1

const PARAMETERS = {
  GENERATECODE:'/1/wechatApp/qr/generatecode',// 生成二维码
  GETACCESSTOKEN: '/1/wechatApp/getAccessToken',// 获取access_token
  SENDWEAPPMESSAGE: '/1/wechatApp/SendWeAppMessage',// 小程序模版消息
  NOTIFYMSG: '/1/wechatApp/notifyMsg', // 微信主人通知
  REFUND: '/1/pay/refund', // 微信退款
  REQUESTSMSCODE: '/1/requestSmsCode',// 请求短信验证码
  VERIFYSMSCODE: '/1/verifySmsCode', // 验证短信验证码
  FUNCTIONS: '/1/functions', // 云函数
  REQUESTPASSWORDRESET: '/1/requestPasswordReset', // 重置密码(email)
  RESETPASSWORDBYSMSCODE: '/1/resetPasswordBySmsCode',// 重置密码(短信)
  UPDATEUSERPASSWORD: '/1/updateUserPassword',// 重置密码(登录状态下旧密码换新密码)
  PUSH: '/1/push', //APP推送
  FILES: '/2/files', // 单个文件上传/删除
  DELFILES: '/2/cdnBatchDelete', // 批量删除
  TIMESTAMP: '/1/timestamp', // 获取服务器时间
  LOGIN:'/1/login',//登陆
  REGISTER:'/1/users',//注册
  REQUEST_EMAIL_VERIFY:'/1/requestEmailVerify',//注册
  USERS: '/1/users',// 查询用户
  QUERY: '/1/classes' // 查询数据
}
module.exports = {
  host: HOST,
  applicationId: APPLICATION_ID,
  applicationKey: APPLICATION_KEY,
  parameters: PARAMETERS,
  version:VERSION,
  type:TYPE
}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = {"name":"js-sdk","version":"1.0.0","description":"Bmob SDK","main":"./src/lib/app.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","build":"webpack --config config/prod.env.js","watch":"webpack --watch --config config/prod.env.js","dev":"webpack-dev-server --config config/dev.env.js"},"repository":{"type":"git","url":"git+https://github.com/bmob/bmob-js-sdk-es6"},"author":"Bmob","license":"ISC","bugs":{"url":"https://github.com/bmob/bmob-js-sdk-es6/issues"},"homepage":"https://github.com/bmob/bmob-js-sdk-es6#readme","dependencies":{"axios":"^0.18.0","node.extend":"^2.0.0","webpack":"^3.10.0"},"devDependencies":{"clean-webpack-plugin":"^0.1.17","html-webpack-plugin":"^2.30.1","uglifyjs-webpack-plugin":"^1.1.6","webpack-dev-server":"^2.9.7"}}

/***/ }),
/* 11 */
/***/ (function(module, exports) {

// const ROOT = require('../../package.json')
const HOST = 'https://api.bmob.cn'
const APPLICATION_ID = ''
const APPLICATION_KEY = ''
// const VERSION = `v${ROOT.version}`
// 注意小程序开发时，这个地方一定记得写死
const VERSION = 1
// 1.h5 2.小程序 3.快应用
const TYPE = 1

const PARAMETERS = {
  GENERATECODE:'/1/wechatApp/qr/generatecode',// 生成二维码
  GETACCESSTOKEN: '/1/wechatApp/getAccessToken',// 获取access_token
  SENDWEAPPMESSAGE: '/1/wechatApp/SendWeAppMessage',// 小程序模版消息
  NOTIFYMSG: '/1/wechatApp/notifyMsg', // 微信主人通知
  REFUND: '/1/pay/refund', // 微信退款
  REQUESTSMSCODE: '/1/requestSmsCode',// 请求短信验证码
  VERIFYSMSCODE: '/1/verifySmsCode', // 验证短信验证码
  FUNCTIONS: '/1/functions', // 云函数
  REQUESTPASSWORDRESET: '/1/requestPasswordReset', // 重置密码(email)
  RESETPASSWORDBYSMSCODE: '/1/resetPasswordBySmsCode',// 重置密码(短信)
  UPDATEUSERPASSWORD: '/1/updateUserPassword',// 重置密码(登录状态下旧密码换新密码)
  PUSH: '/1/push', //APP推送
  FILES: '/2/files', // 单个文件上传/删除
  DELFILES: '/2/cdnBatchDelete', // 批量删除
  TIMESTAMP: '/1/timestamp', // 获取服务器时间
  LOGIN:'/1/login',//登陆
  REGISTER:'/1/users',//注册
  REQUEST_EMAIL_VERIFY:'/1/requestEmailVerify',//注册
  USERS: '/1/users',// 查询用户
  QUERY: '/1/classes' // 查询数据
}

module.exports = {
  host: HOST,
  applicationId: APPLICATION_ID,
  applicationKey: APPLICATION_KEY,
  parameters: PARAMETERS,
  version:VERSION,
  type:TYPE
}


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

const request = __webpack_require__(2)
const storage = __webpack_require__(13)
const query = __webpack_require__(5)
const Bmob = __webpack_require__(0)
const error = __webpack_require__(3)
const { isObject, isString, isNumber } = __webpack_require__(1)

const user = class user extends query {
  constructor() {
    const tableName = '_User'
    super(tableName)
  }
  set(key, val = "") {
    if (isString(key)) {
      this.setData[key] = val;
    }
  }
  requestEmailVerify(email) {
    if (!isString(email)) {
      //异常
      throw new error(415)
    }

    this.setData = Object.assign({}, { email })
    console.log(this.setData)
    let route = Bmob._config.parameters.REQUEST_EMAIL_VERIFY
    return request(route, 'post', this.setData)
  }
  register(parma) {
    if (!isObject(parma)) {
      //异常
      throw new error(415)
    }
    this.setData = Object.assign(this.setData, parma)
    console.log(this.setData)
    let route = Bmob._config.parameters.REGISTER
    return request(route, 'post', this.setData)
  }

  login(username, password) {

    if (!isString(username) || !isString(password)) {
      //异常
      throw new error(415)
    }
    this.setData = Object.assign({}, { username, password })
    let route = Bmob._config.parameters.LOGIN
    return new Promise((resolve, reject) => {
      request(route, 'get', this.setData).then(res => {
        storage.save('bmob', res);
        resolve(res)
      }).catch(err => {
        console.log('登陆失败')
        reject(err)
      })
    })
  }
  users() {
    let route = Bmob._config.parameters.USERS
    return request(route, 'get')
  }
  signOrLoginByMobilePhone(mobilePhoneNumber, smsCode) {
    // 手机号登陆
    if (!isNumber(mobilePhoneNumber) || !isNumber(smsCode)) {
      //异常
      throw new error(415)
    }
    this.setData = Object.assign({}, { mobilePhoneNumber, smsCode })
    let route = Bmob._config.parameters.LOGIN
    return request(route, 'get', this.setData)
  }
  requestOpenId(code) {
    return request("/1/wechatApp/" + code, "POST", {});
  }
  linkWith(data) {
    // 第三方登陆
    let authData = { "authData": data }
    let route = Bmob._config.parameters.USERS
    return request(route, "POST", authData);
  }
  loginWithWeapp(code) {

    return new Promise((resolve, reject) => {
      this.requestOpenId(code).then(res => {
        const data = { "weapp": res }
        const result = this.linkWith(data)
        resolve(result);
      }).catch(err => {
        reject(err);
      })
    })

  }
  current() {
    const data = storage.fetch('bmob')
    return typeof data == 'object' ? data : JSON.parse(data)
  }
  upInfo(userInfo) {
    return new Promise((resolve, reject) => {

      var nickName = userInfo.nickName
      var avatarUrl = userInfo.avatarUrl

      var currentUser = this.current()
      if (!currentUser) {
        console.log('未获取到用户信息')
        reject('未获取到用户信息');
      }
      var openid = storage.fetch('openid')
      this.get(currentUser.objectId).then(res => {
        res.set('nickName', nickName)
        res.set('userPic', avatarUrl)
        res.set('openid', openid)
        res.save().then(result => {
          resolve(result);
        }).catch(err => {
          console.log(err)
          reject(err);
        })
       
      }).catch(err => {
        console.log(err)
        reject(err);
      })
    })
  }
  auth() {
    var that = this;
    return new Promise((resolve, reject) => {
      const login = () => {
        wx.login({
          success: res => {
            that.loginWithWeapp(res.code).then(
              user => {

                if(user.error){
                  throw new error(415)
                  return
                }
                var openid = user.authData.weapp.openid
                storage.save('openid', openid)
                storage.save('bmob', user)
                //保存用户其他信息到用户表
                resolve(user);
              },
              function (err) {
                reject(err);
              }
            )
          }
        })
      }
      wx.checkSession({
        success: function () {
          console.log('用户在线中')
          resolve('用户在线中');
          login()
        },
        fail: () => {
          login()
        }
      })

    })

  }
}

module.exports = user

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// const Bmob = require('./bmob')
const utils = __webpack_require__(4)

let storage
// //获取当前应用类型
const type = utils.getAppType()
console.log('type',type)
// h5
if (type == 'h5') {
  storage = __webpack_require__(14)
} else if (type == 'wx') {
  // 小程序
  storage = __webpack_require__(15)
} else if (type == 'hap') {
  //快应用功能
}

module.exports = storage


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

const { isObject, isString, isNumber } = __webpack_require__(1)
const storage = {
  save(key, value) {
    if (!isString(key) || !value) {
      throw new error(415)
    }
    localStorage.setItem(key, JSON.stringify(value));
  },
  fetch(key) {
    if (!isString(key)) {
      throw new error(415)
    }
    return JSON.parse(localStorage.getItem(key)) || null;
  },
  remove(key) {
    if (!isString(key)) {
      throw new error(415)
    }
    localStorage.removeItem(key);
  },
  clear() {
    localStorage.clear();
  }
};
module.exports = storage

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

const { isObject, isString, isNumber } = __webpack_require__(1)

const storage = {
  save(key, value) {
    if (!isString(key) || !value) {
      throw new error(415)
    }
    return wx.setStorageSync(key, JSON.stringify(value))
  },
  fetch(key) {
    if (!isString(key)) {
      throw new error(415)
    }
    return wx.getStorageSync(key) || null
  },
  remove(key) {
    if (!isString(key)) {
      throw new error(415)
    }
    return wx.removeStorageSync(key)
  },
  clear() {
    return wx.clearStorageSync()
  }
};
module.exports = storage

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

const request = __webpack_require__(2)
let Bmob = __webpack_require__(0)
const error = __webpack_require__(3)
const utils = __webpack_require__(4)
const { isObject, isString, isArray } = __webpack_require__(1)
let list = []

class file {
  constructor(name, parma) {
    if (name && parma) {
      if (!isString(name)) {
        throw new error(415)
      }
      list.push({ route: `${Bmob._config.parameters.FILES}/${name}`, data: parma })
    }
  }
  save() {
    if (!list.length) {
      throw new error(417)
    }
    let fileObj
    // //获取当前应用类型
    const type = utils.getAppType()
    // h5
    if (type == 'h5') {
      fileObj = new Promise((resolve, reject) => {
        const data = []
        for (let item of list) {
          request(item.route, 'post', item.data).then(({ url }) => {
            data.push(url)
            if (data.length == list.length) {
              list = []
              resolve(data)
              reject(data)

            }
          }).catch(err => {
            data.push(err)
          })
        }
      })
    } else if (type == 'wx') {
      // 小程序
      fileObj = new Promise((resolve, reject) => {

        if (undefined == Bmob.User) {
          Bmob = __webpack_require__(0)
        }

        var current = Bmob.User.current()
        if (!current) {
          throw new error(418)
        }

        const data = []
        const key = { "_ApplicationId": Bmob._config.applicationId, "_RestKey": Bmob._config.applicationKey, "_SessionToken": current.sessionToken }
        const formData = Object.assign({ "_ContentType": "text/plain", "mime_type": "text/plain", "category": "wechatApp", "_ClientVersion": "js3.6.1", "_InstallationId": "bmob" }, key)
        for (let item of list) {
          wx.uploadFile({
            url: Bmob._config.host + item.route, //仅为示例，非真实的接口地址
            filePath: item.data,
            name: 'file',
            header: {
              "X-Bmob-SDK-Type": "wechatApp"
            },
            formData: formData,
            success: function (res) {
              var url = res.data
              data.push(url)
              if (data.length == list.length) {
                list = []
                resolve(data)
                reject(data)
              }
            },
            fail: function (err) {
              data.push(err)
            }
          })
        }
      })
    } else if (type == 'hap') {
      //快应用功能
    }
    return fileObj
  }
  destroy(parma) {
    if (isString(parma)) {
      return request(`${Bmob._config.parameters.FILES}/upyun/${parma.split('.com/')[1]}`, 'delete')
    } else if (isArray(parma)) {
      const data = []
      parma.map(item => {
        data.push(item.split('.com/')[1])
      })
      return request(Bmob._config.parameters.DELFILES, 'post', { "upyun": data })
    } else {
      throw new error(415)
    }
  }
}

module.exports = file


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

const request = __webpack_require__(2)
const Bmob = __webpack_require__(0)
const error = __webpack_require__(3)
const { isObject, isString, isArray } = __webpack_require__(1)
const list = []

class pay {
  constructor() {
    // 初始化
  }
  weApp(price, product_name, body) {
    var openid = wx.getStorageSync('openid');
    if (!price || !product_name || !body || !openid) {
      throw new error(416)
    }
    //传参数金额，名称，描述,openid
    var data = { "order_price": price, "product_name": product_name, "body": body, "open_id": openid, "pay_type": 4 }
    let route = '/1/pay'
    return request(route, 'post', data)
  }

}

module.exports = pay


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

const request = __webpack_require__(2)
const Bmob = __webpack_require__(0)
const error = __webpack_require__(3)
const { isObject, isString } = __webpack_require__(1)

// --------------小程序SDK-------------------

/**
 * 生成小程序二维码
 * @return {Object}
 */
const generateCode = (data) => {
  if (!isObject(data)) {
    //参数异常
    throw new error(415)
  }
  let route = Bmob._config.parameters.GENERATECODE
  return request(route,'post',data)
}

/**
 * 获取access_token
 * @return {Object}
 */
const getAccessToken = (data) => {
  let route = Bmob._config.parameters.GETACCESSTOKEN
  return request(route,'get')
}

/**
 * 小程序模版信息
 * @return {Object}
 */
const sendWeAppMessage = (data) => {
    if (!isObject(data)) {
      //参数异常
      throw new error(415)
    }
    let route = Bmob._config.parameters.SENDWEAPPMESSAGE
    return request(route,'post',data)
}

const sendMessage = (data) => {
  //       var request = Bmob._request("wechatApp/SendWeAppMessage", null, null, 'POST', Bmob._encode(data, null, true));
  return 1
}

/**
 * 小程序图片上传
 * @return {Object}
 */

 /**
 * 微信退款
 * @return {Object}
 */
const refund = (data) => {
  if (!isObject(data)) {
    //参数异常
    throw new error(415)
  }
  let route = Bmob._config.parameters.REFUND
  return request(route,'post',data)
}

 /**
 * 微信主人通知(主人信息推送)
 * @return {Object}
 */
const notifyMsg = (data) => {
  if (!isObject(data)) {
    //参数异常
    throw new error(415)
  }
  let route = Bmob._config.parameters.NOTIFYMSG
  return request(route,'post',data)
}


// --------------RESTful SDK-------------------


 /**
 * 密码重置
 * @return {Object}
 */

//Email 重置
const requestPasswordReset = (data) => {
  if (!isObject(data)) {
    //参数异常
    throw new error(415)
  }
  let route = Bmob._config.parameters.REQUESTPASSWORDRESET
  return request(route,'post',data)
}


// 短信验证码重置
const resetPasswordBySmsCode = (smsCode,data) => {
  if (!isString(smsCode)) {
    //参数异常
    throw new error(415)
  }
  let route = `${Bmob._config.parameters.RESETPASSWORDBYSMSCODE}/${smsCode}`
  return request(route,'put',data)
}

// 提供旧密码方式安全修改用户密码
const updateUserPassword = (objectId,data) => {
  if (!isObject(data) || !isString(objectId)) {
    //参数异常
    throw new error(415)
  }
  let route = `${Bmob._config.parameters.UPDATEUSERPASSWORD}/${objectId}`
  return request(route,'put',data)
}

 /**
 * 获取服务器时间
 * @return {Object}
 */

 const timestamp = () => {
   let route = Bmob._config.parameters.TIMESTAMP
   return request(route,'get')
 }

 /**
 * 推送消息
 * @return {Object}
 */
const push = (data) => {
  if (!isObject(data)) {
    //参数异常
    throw new error(415)
  }
  let route = Bmob._config.parameters.PUSH
  return request(route,'post',data)
}


// ---------------云函数------------------------
/**
 * 云函数
 * @return {Object}
 */
const functions = (funName, data) => {
  // 如果运行的云函数不需要传入参数，注意，"{}"是不能缺的
  if (!data) {
    data = {}
  }
  if (!isString(funName)) {
    //参数异常
    throw new error(415)
  }
  let route = `${Bmob._config.parameters.FUNCTIONS}/${funName}`
  return request(route,'post',data)
}

module.exports = {
  generateCode,
  sendMessage,
  getAccessToken,
  sendWeAppMessage,
  refund,
  notifyMsg,
  functions,
  timestamp,
  requestPasswordReset,
  resetPasswordBySmsCode,
  updateUserPassword,
  push
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {


const request = __webpack_require__(2)
const Bmob = __webpack_require__(0)
const error = __webpack_require__(3)
const { isObject, isString } = __webpack_require__(1)

//   /**
// * 请求短信验证码
// * @param {Object} 相应的参数
// * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。
// * @return {Bmob.Promise}
// */

    const requestSmsCode = (data, options) => {
        if (!isObject(data)) {
            //参数异常
            throw new error(415)
        }
        let route = Bmob._config.parameters.REQUESTSMSCODE
        return request(route,'post',data)
    }
//   /**
// * 验证短信验证码
// * @param {Object} 相应的参数
// * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。
// * @return {Bmob.Promise}
// */
    const verifySmsCode = (data, options) => {
        if (!isString(data)) {
            //参数异常
            throw new error(415)
        }
        let route = `${Bmob._config.parameters.VERIFYSMSCODE}/${data}`
        return request(route,'post')
    }

module.exports = {requestSmsCode,verifySmsCode};

/***/ })
/******/ ]);
});